Basic Commands
1. docker version - will return the version

2. docker images - will show the images we pulled

3. docker pull selenium/hub - will pull the selenium hub image from https://hub.docker.com/

4. docker pull selenium/standalone-chrome-debug - will pull the selenium image with an option to view and debug with vnc

5. docker pull selenium/standalone-chrome - will pull the selenium image for chrome

6. docker pull selenium/standalone-firefox - will pull the selenium image for firefox

7. docker pull selenium/standalone-firefox-debug - will pull the selenium image for firefox with an option to view and debug with vnc

8. To connect to the node for debug use the following links: with port 5900 -  the commands will run the image

9. docker --version

10. docker info

11. docker --help or docker command --help   - will show general help or the help of the command

12. docker login - will login to docker hub

13. docker rmi imageID - will delete the image

Containers commands
14. docker ps - Will give real live information about memory...

15. docker run imageID - will run the image or will pull it

16. docker start imageID -

17. docker stop imageID -

18. docker system df - will give information about disc usage

19. docker system prune - remove all unused images ***

20. docker images -q   - Will return only imageID

21. docker images -f

22. docker images -f "dangling=false" - will show images that are not referenced to any container 

23. docker images -f "dangling=false" -q  - will show images that are not referenced to any container but only the imageID

24. docker run - will run or pull the container

25. docker rmi -f image - will delete the image

26. docker start ContainerName/ID  -  will start the Container

27. docker stop ContainerName/ID  -  will stop the Container

28. docker pause ContainerName/ID  -  will pause the Container

29. docker unpause ContainerName/ID  -  will unpause the Container

30. docker top ContainerName/ID  -  will show info for the Container

31. docker stats ContainerName/ID  -  will show info for the Container

32. docker attach ContainerName/ID  -  

33. docker kill ContainerName/ID  -  

34. docker rm ContainerName/ID  -  

34. docker history ContainerName/ID  -  will show all history of ContainerName/ID

35. docker volume - Will show the volume commands

36. docker volume create volumName - will create a volume with the name of volumName

37. docker ps -a  -  to check if there is a process runinnng

38. docker logs -f containerID

39. docker stop $(docker ps -aq) - will stop all containers

40. docker rm $(docker ps -aq) - remove all containers

41. docker rmi $(docker images -q) - remove all containers

DockerFile commands
42. docker build. - This will build if you are in the folder of the Dockerfile

43. docker build -t ImageName:Tag DirectoryOfDocker - This will build if you are not in the folder of the Dockerfile and will add it to the list of images
Example:
docker build -t myimage1:1.0 C:/Users/Solomon/git/SeleniumJavaFullFramework/FullSeleniumFramework/Docker/DockerFiles
To run this image do- docker run imageID
Info:
https://docs.docker.com/engine/reference/builder/#environment-replacement
https://github.com/wsargent/docker-cheat-sheet#dockerfile

Docker compose commands
44. docker-compose -v - will return  version and build number

45. docker-compose version - will give more information

46. docker-compose --version - will return  version and build number

47. docker-compose config - This should be run from the folder of the compose file and it will check for errors

48. docker-compose up -d - This will run the compose file in a detached mode need to run from the file folder

49. docker-compose down - this will stop all the containers

50. docker-compose up -d --scale service=number -this will scale a specific service 
Example:
docker-compose -f dockerComposeFileName.yaml up -d
docker-compose up -d --scale database=4
docker-compose up -d --scale web=1
docker-compose restart - Will restart the hub
docker-compose down - Will stop and remove the containers  

51. docker-compose --help - Will show the help file

Docker volume commands
52. docker volume --help - will give help options

53. docker volume

54. docker volume create VolumeName - Will create a volume with this VolumeName

55. docker volume ls - will give the info of all the volumes

56. docker volume inspect VolumeName - will give the info on the volume

57. docker volume rm VolumeName - will delete the volume

58. docker volume prune - will remove all the unused volumes


Docker Swarm commands ****we have to use git bash**
59. docker-machine create --driver hyperv manager1 - will create a machine named manager1

60. docker-machine env manager1 - Will give info about manager1 machine (IP, name, location, tls verify)

61. docker-machine ls - will show all the machines and the information

62. docker-machine ip manager1 - Will give the IP of the machine

63. docker-machine ssh machineName - will ssh connect to the machine
Example:
docker-machine ssh manager1

64. docker swarm init --advertise-addr MAMAGER_IP - This will set this machine as the manager and will initialize the swarm this will run only on the manager machine
Example:
docker swarm init --advertise-addr 192.168.0.102

65. docker node ls - will show the running nodes in the swarm this will run only in the swarm manager and will show who is the leader in the swarm

66. docker swarm join --token worker IP - this will add a worker to the manager swarm
Example:
docker swarm join --token SWMTKN-1-6ckhm0stuq1bri8stmduc2mrnay77rx5o2vfrsn2lncfwhvegh-6wigr1p69fb3vyu7qqp51xr7o 192.168.0.102:2377

67. docker swarm join --token manager IP - this will add a manager to the manager swarm

68. docker info - will give all the information about the swarm and the machine

69. docker-machine start/stop/kill NodeName

70. docker-machine regenerate-certs NodeName - Will renew the certificate of the machine when we have errors
Example:
docker-machine regenerate-certs NodeName  manager1 worker1 worker2 

71. docker service create --replicas 3 -p 80:80 --name web1 nginx - THis needs to run on the manager and it will pull and install 3 replicas of nginx on the machines

72. docker service ls - this will show the service name and his information

73. docker service ps serviceName - Will give the status of the service
Example:
docker service ps web1

74. docker service scale serviceName=4 - This will add more nodes this will run only on manager swarm
Example:
docker service scale web1=4

75. docker node inspect nodeName - Will give the node info 
Example:
docker node inspect manager1

76. docker node inspect self - Will give the node info but only on manager node
 
77. docker service update --image nginx:1.14.0 serviceName - This will update the image in the service we created
Example:
docker service update --image nginx:1.14.0 web1

78. docker node update --availability drain NodeName -  this will shutdown the node

79. docker service rm serviceName - This will remove the service
Example:
docker service rm web1

80. docker swarm leave - This will leave the swarm

81. docker-machine stop machineName - Will stop the machine

82. docker-machine rm machineName - Will remove the machine



